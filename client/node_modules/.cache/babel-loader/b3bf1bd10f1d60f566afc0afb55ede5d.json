{"ast":null,"code":"var _jsxFileName = \"/Users/shellygupta/Desktop/Algorithms/Group/client/src/components/ChartPie.js\";\nimport React from \"react\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ChartPie(props) {\n  const {\n    foodData,\n    weights,\n    activityLevel,\n    age,\n    height,\n    initialWeight\n  } = props;\n\n  const calculateFat = () => {\n    let totalFat = 0;\n    foodData && foodData.breakfast && foodData.breakfast.forEach(food => {\n      totalFat += food.food_id.fat * food.quantity;\n    });\n    foodData && foodData.lunch && foodData.lunch.forEach(food => {\n      totalFat += food.food_id.fat * food.quantity;\n    });\n    foodData && foodData.dinner && foodData.dinner.forEach(food => {\n      totalFat += food.food_id.fat * food.quantity;\n    });\n    return totalFat * 9;\n  };\n\n  const calculateCarb = () => {\n    let totalCarb = 0;\n    foodData && foodData.breakfast && foodData.breakfast.forEach(food => {\n      totalCarb += food.food_id.carb * food.quantity;\n    });\n    foodData && foodData.lunch && foodData.lunch.forEach(food => {\n      totalCarb += food.food_id.carb * food.quantity;\n    });\n    foodData && foodData.dinner && foodData.dinner.forEach(food => {\n      totalCarb += food.food_id.carb * food.quantity;\n    });\n    return totalCarb * 4;\n  };\n\n  const calculateProtein = () => {\n    let totalProtein = 0;\n    foodData && foodData.breakfast && foodData.breakfast.forEach(food => {\n      totalProtein += food.food_id.protein * food.quantity;\n    });\n    foodData && foodData.lunch && foodData.lunch.forEach(food => {\n      totalProtein += food.food_id.protein * food.quantity;\n    });\n    foodData && foodData.dinner && foodData.dinner.forEach(food => {\n      totalProtein += food.food_id.protein * food.quantity;\n    });\n    return totalProtein * 4;\n  };\n\n  const totalCalorie = () => {\n    let activityRatio = 0;\n    let weightForCalc = 0;\n\n    if (!weights[weights.length - 1]) {\n      weightForCalc = initialWeight;\n    } else {\n      weightForCalc = weights[weights.length - 1];\n    }\n\n    if (activityLevel === \"noActivity\") activityRatio = 1.2;\n    if (activityLevel === \"lightActivity\") activityRatio = 1.375;\n    if (activityLevel === \"moderateActivity\") activityRatio = 1.55;\n    if (activityLevel === \"heavyActivity\") activityRatio = 1.725;\n    let BMR = 66 + 6.3 * weightForCalc + 12.9 * (height / 2.54) - 6.8 * age;\n    let total = Math.floor(BMR * activityRatio);\n    const fat = calculateFat();\n    const protein = calculateProtein();\n    const carb = calculateCarb();\n    total = total - fat - protein - carb;\n\n    if (total < 0) {\n      return 0;\n    }\n\n    return total;\n  };\n\n  const data = {\n    labels: [\"Calories Left\", \"Fat\", \"Protein\", \"Carb\"],\n    datasets: [{\n      label: \"My First Dataset\",\n      data: [totalCalorie(), calculateFat(), calculateProtein(), calculateCarb()],\n      backgroundColor: [\"rgb(255, 99, 132)\", \"rgb(54, 162, 235)\", \"rgb(50,205,50)\", \"rgb(255, 205, 86)\"],\n      hoverOffset: 4\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Doughnut, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_c = ChartPie;\nexport default ChartPie;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartPie\");","map":{"version":3,"sources":["/Users/shellygupta/Desktop/Algorithms/Group/client/src/components/ChartPie.js"],"names":["React","Doughnut","ChartPie","props","foodData","weights","activityLevel","age","height","initialWeight","calculateFat","totalFat","breakfast","forEach","food","food_id","fat","quantity","lunch","dinner","calculateCarb","totalCarb","carb","calculateProtein","totalProtein","protein","totalCalorie","activityRatio","weightForCalc","length","BMR","total","Math","floor","data","labels","datasets","label","backgroundColor","hoverOffset"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,iBAAzB;;;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,OAAZ;AAAqBC,IAAAA,aAArB;AAAoCC,IAAAA,GAApC;AAAyCC,IAAAA,MAAzC;AAAiDC,IAAAA;AAAjD,MACJN,KADF;;AAGA,QAAMO,YAAY,GAAG,MAAM;AACzB,QAAIC,QAAQ,GAAG,CAAf;AACAP,IAAAA,QAAQ,IACNA,QAAQ,CAACQ,SADX,IAEER,QAAQ,CAACQ,SAAT,CAAmBC,OAAnB,CAA4BC,IAAD,IAAU;AACnCH,MAAAA,QAAQ,IAAIG,IAAI,CAACC,OAAL,CAAaC,GAAb,GAAmBF,IAAI,CAACG,QAApC;AACD,KAFD,CAFF;AAMAb,IAAAA,QAAQ,IACNA,QAAQ,CAACc,KADX,IAEEd,QAAQ,CAACc,KAAT,CAAeL,OAAf,CAAwBC,IAAD,IAAU;AAC/BH,MAAAA,QAAQ,IAAIG,IAAI,CAACC,OAAL,CAAaC,GAAb,GAAmBF,IAAI,CAACG,QAApC;AACD,KAFD,CAFF;AAKAb,IAAAA,QAAQ,IACNA,QAAQ,CAACe,MADX,IAEEf,QAAQ,CAACe,MAAT,CAAgBN,OAAhB,CAAyBC,IAAD,IAAU;AAChCH,MAAAA,QAAQ,IAAIG,IAAI,CAACC,OAAL,CAAaC,GAAb,GAAmBF,IAAI,CAACG,QAApC;AACD,KAFD,CAFF;AAMA,WAAON,QAAQ,GAAG,CAAlB;AACD,GApBD;;AAsBA,QAAMS,aAAa,GAAG,MAAM;AAC1B,QAAIC,SAAS,GAAG,CAAhB;AACAjB,IAAAA,QAAQ,IACNA,QAAQ,CAACQ,SADX,IAEER,QAAQ,CAACQ,SAAT,CAAmBC,OAAnB,CAA4BC,IAAD,IAAU;AACnCO,MAAAA,SAAS,IAAIP,IAAI,CAACC,OAAL,CAAaO,IAAb,GAAoBR,IAAI,CAACG,QAAtC;AACD,KAFD,CAFF;AAKAb,IAAAA,QAAQ,IACNA,QAAQ,CAACc,KADX,IAEEd,QAAQ,CAACc,KAAT,CAAeL,OAAf,CAAwBC,IAAD,IAAU;AAC/BO,MAAAA,SAAS,IAAIP,IAAI,CAACC,OAAL,CAAaO,IAAb,GAAoBR,IAAI,CAACG,QAAtC;AACD,KAFD,CAFF;AAKAb,IAAAA,QAAQ,IACNA,QAAQ,CAACe,MADX,IAEEf,QAAQ,CAACe,MAAT,CAAgBN,OAAhB,CAAyBC,IAAD,IAAU;AAChCO,MAAAA,SAAS,IAAIP,IAAI,CAACC,OAAL,CAAaO,IAAb,GAAoBR,IAAI,CAACG,QAAtC;AACD,KAFD,CAFF;AAKA,WAAOI,SAAS,GAAG,CAAnB;AACD,GAlBD;;AAoBA,QAAME,gBAAgB,GAAG,MAAM;AAC7B,QAAIC,YAAY,GAAG,CAAnB;AACApB,IAAAA,QAAQ,IACNA,QAAQ,CAACQ,SADX,IAEER,QAAQ,CAACQ,SAAT,CAAmBC,OAAnB,CAA4BC,IAAD,IAAU;AACnCU,MAAAA,YAAY,IAAIV,IAAI,CAACC,OAAL,CAAaU,OAAb,GAAuBX,IAAI,CAACG,QAA5C;AACD,KAFD,CAFF;AAKAb,IAAAA,QAAQ,IACNA,QAAQ,CAACc,KADX,IAEEd,QAAQ,CAACc,KAAT,CAAeL,OAAf,CAAwBC,IAAD,IAAU;AAC/BU,MAAAA,YAAY,IAAIV,IAAI,CAACC,OAAL,CAAaU,OAAb,GAAuBX,IAAI,CAACG,QAA5C;AACD,KAFD,CAFF;AAKAb,IAAAA,QAAQ,IACNA,QAAQ,CAACe,MADX,IAEEf,QAAQ,CAACe,MAAT,CAAgBN,OAAhB,CAAyBC,IAAD,IAAU;AAChCU,MAAAA,YAAY,IAAIV,IAAI,CAACC,OAAL,CAAaU,OAAb,GAAuBX,IAAI,CAACG,QAA5C;AACD,KAFD,CAFF;AAKA,WAAOO,YAAY,GAAG,CAAtB;AACD,GAlBD;;AAoBA,QAAME,YAAY,GAAG,MAAM;AACzB,QAAIC,aAAa,GAAG,CAApB;AACA,QAAIC,aAAa,GAAG,CAApB;;AACA,QAAI,CAACvB,OAAO,CAACA,OAAO,CAACwB,MAAR,GAAiB,CAAlB,CAAZ,EAAkC;AAChCD,MAAAA,aAAa,GAAGnB,aAAhB;AACD,KAFD,MAEO;AACLmB,MAAAA,aAAa,GAAGvB,OAAO,CAACA,OAAO,CAACwB,MAAR,GAAiB,CAAlB,CAAvB;AACD;;AACD,QAAIvB,aAAa,KAAK,YAAtB,EAAoCqB,aAAa,GAAG,GAAhB;AACpC,QAAIrB,aAAa,KAAK,eAAtB,EAAuCqB,aAAa,GAAG,KAAhB;AACvC,QAAIrB,aAAa,KAAK,kBAAtB,EAA0CqB,aAAa,GAAG,IAAhB;AAC1C,QAAIrB,aAAa,KAAK,eAAtB,EAAuCqB,aAAa,GAAG,KAAhB;AACvC,QAAIG,GAAG,GAAG,KAAK,MAAMF,aAAX,GAA2B,QAAQpB,MAAM,GAAG,IAAjB,CAA3B,GAAoD,MAAMD,GAApE;AACA,QAAIwB,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWH,GAAG,GAAGH,aAAjB,CAAZ;AACA,UAAMX,GAAG,GAAGN,YAAY,EAAxB;AACA,UAAMe,OAAO,GAAGF,gBAAgB,EAAhC;AACA,UAAMD,IAAI,GAAGF,aAAa,EAA1B;AACAW,IAAAA,KAAK,GAAGA,KAAK,GAAGf,GAAR,GAAcS,OAAd,GAAwBH,IAAhC;;AACA,QAAIS,KAAK,GAAG,CAAZ,EAAe;AACb,aAAO,CAAP;AACD;;AACD,WAAOA,KAAP;AACD,GAtBD;;AAwBA,QAAMG,IAAI,GAAG;AACXC,IAAAA,MAAM,EAAE,CAAC,eAAD,EAAkB,KAAlB,EAAyB,SAAzB,EAAoC,MAApC,CADG;AAEXC,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,KAAK,EAAE,kBADT;AAEEH,MAAAA,IAAI,EAAE,CACJR,YAAY,EADR,EAEJhB,YAAY,EAFR,EAGJa,gBAAgB,EAHZ,EAIJH,aAAa,EAJT,CAFR;AAQEkB,MAAAA,eAAe,EAAE,CACf,mBADe,EAEf,mBAFe,EAGf,gBAHe,EAIf,mBAJe,CARnB;AAcEC,MAAAA,WAAW,EAAE;AAdf,KADQ;AAFC,GAAb;AAqBA,sBACE;AAAA,2BACE,QAAC,QAAD;AAAU,MAAA,IAAI,EAAEL;AAAhB;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAKD;;KApHQhC,Q;AAsHT,eAAeA,QAAf","sourcesContent":["import React from \"react\";\nimport { Doughnut } from \"react-chartjs-2\";\n\nfunction ChartPie(props) {\n  const { foodData, weights, activityLevel, age, height, initialWeight } =\n    props;\n\n  const calculateFat = () => {\n    let totalFat = 0;\n    foodData &&\n      foodData.breakfast &&\n      foodData.breakfast.forEach((food) => {\n        totalFat += food.food_id.fat * food.quantity;\n      });\n\n    foodData &&\n      foodData.lunch &&\n      foodData.lunch.forEach((food) => {\n        totalFat += food.food_id.fat * food.quantity;\n      });\n    foodData &&\n      foodData.dinner &&\n      foodData.dinner.forEach((food) => {\n        totalFat += food.food_id.fat * food.quantity;\n      });\n\n    return totalFat * 9;\n  };\n\n  const calculateCarb = () => {\n    let totalCarb = 0;\n    foodData &&\n      foodData.breakfast &&\n      foodData.breakfast.forEach((food) => {\n        totalCarb += food.food_id.carb * food.quantity;\n      });\n    foodData &&\n      foodData.lunch &&\n      foodData.lunch.forEach((food) => {\n        totalCarb += food.food_id.carb * food.quantity;\n      });\n    foodData &&\n      foodData.dinner &&\n      foodData.dinner.forEach((food) => {\n        totalCarb += food.food_id.carb * food.quantity;\n      });\n    return totalCarb * 4;\n  };\n\n  const calculateProtein = () => {\n    let totalProtein = 0;\n    foodData &&\n      foodData.breakfast &&\n      foodData.breakfast.forEach((food) => {\n        totalProtein += food.food_id.protein * food.quantity;\n      });\n    foodData &&\n      foodData.lunch &&\n      foodData.lunch.forEach((food) => {\n        totalProtein += food.food_id.protein * food.quantity;\n      });\n    foodData &&\n      foodData.dinner &&\n      foodData.dinner.forEach((food) => {\n        totalProtein += food.food_id.protein * food.quantity;\n      });\n    return totalProtein * 4;\n  };\n\n  const totalCalorie = () => {\n    let activityRatio = 0;\n    let weightForCalc = 0;\n    if (!weights[weights.length - 1]) {\n      weightForCalc = initialWeight;\n    } else {\n      weightForCalc = weights[weights.length - 1];\n    }\n    if (activityLevel === \"noActivity\") activityRatio = 1.2;\n    if (activityLevel === \"lightActivity\") activityRatio = 1.375;\n    if (activityLevel === \"moderateActivity\") activityRatio = 1.55;\n    if (activityLevel === \"heavyActivity\") activityRatio = 1.725;\n    let BMR = 66 + 6.3 * weightForCalc + 12.9 * (height / 2.54) - 6.8 * age;\n    let total = Math.floor(BMR * activityRatio);\n    const fat = calculateFat();\n    const protein = calculateProtein();\n    const carb = calculateCarb();\n    total = total - fat - protein - carb;\n    if (total < 0) {\n      return 0;\n    }\n    return total;\n  };\n\n  const data = {\n    labels: [\"Calories Left\", \"Fat\", \"Protein\", \"Carb\"],\n    datasets: [\n      {\n        label: \"My First Dataset\",\n        data: [\n          totalCalorie(),\n          calculateFat(),\n          calculateProtein(),\n          calculateCarb(),\n        ],\n        backgroundColor: [\n          \"rgb(255, 99, 132)\",\n          \"rgb(54, 162, 235)\",\n          \"rgb(50,205,50)\",\n          \"rgb(255, 205, 86)\",\n        ],\n        hoverOffset: 4,\n      },\n    ],\n  };\n  return (\n    <>\n      <Doughnut data={data} />\n    </>\n  );\n}\n\nexport default ChartPie;\n"]},"metadata":{},"sourceType":"module"}