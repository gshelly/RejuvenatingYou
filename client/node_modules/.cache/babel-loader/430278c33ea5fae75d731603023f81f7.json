{"ast":null,"code":"var _jsxFileName = \"/Users/shellygupta/Desktop/Algorithms/Group/client/src/components/ChartPie.js\";\nimport React from \"react\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ChartPie(props) {\n  const {\n    foodData,\n    weights,\n    activityLevel,\n    age,\n    height,\n    initialWeight\n  } = props;\n\n  const calculateFat = () => {\n    return 1000;\n  };\n\n  const calculateCarb = () => {\n    return 500;\n  };\n\n  const calculateProtein = () => {\n    return 500;\n  };\n\n  const totalCalorie = () => {\n    let activityRatio = 0;\n    let weightForCalc = 0;\n\n    if (!weights[weights.length - 1]) {\n      weightForCalc = initialWeight;\n    } else {\n      weightForCalc = weights[weights.length - 1];\n    }\n\n    if (activityLevel === \"noActivity\") activityRatio = 1.2;\n    if (activityLevel === \"lightActivity\") activityRatio = 1.375;\n    if (activityLevel === \"moderateActivity\") activityRatio = 1.55;\n    if (activityLevel === \"heavyActivity\") activityRatio = 1.725;\n    let BMR = 66 + 6.3 * weightForCalc + 12.9 * (height / 2.54) - 6.8 * age;\n    let total = Math.floor(BMR * activityRatio);\n    const fat = calculateFat();\n    const protein = calculateProtein();\n    const carb = calculateCarb();\n    total = total - fat - protein - carb;\n    return total;\n  };\n\n  const data = {\n    labels: [\"Calories Left\", \"Fat\", \"Protein\", \"Carb\"],\n    datasets: [{\n      label: \"My First Dataset\",\n      data: [totalCalorie(), calculateFat(), calculateProtein(), calculateCarb()],\n      backgroundColor: [\"rgb(255, 99, 132)\", \"rgb(54, 162, 235)\", \"rgb(50,205,50)\", \"rgb(255, 205, 86)\"],\n      hoverOffset: 4\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Doughnut, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_c = ChartPie;\nexport default ChartPie;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartPie\");","map":{"version":3,"sources":["/Users/shellygupta/Desktop/Algorithms/Group/client/src/components/ChartPie.js"],"names":["React","Doughnut","ChartPie","props","foodData","weights","activityLevel","age","height","initialWeight","calculateFat","calculateCarb","calculateProtein","totalCalorie","activityRatio","weightForCalc","length","BMR","total","Math","floor","fat","protein","carb","data","labels","datasets","label","backgroundColor","hoverOffset"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,iBAAzB;;;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,OAAZ;AAAqBC,IAAAA,aAArB;AAAoCC,IAAAA,GAApC;AAAyCC,IAAAA,MAAzC;AAAiDC,IAAAA;AAAjD,MACJN,KADF;;AAGA,QAAMO,YAAY,GAAG,MAAM;AACzB,WAAO,IAAP;AACD,GAFD;;AAIA,QAAMC,aAAa,GAAG,MAAM;AAC1B,WAAO,GAAP;AACD,GAFD;;AAIA,QAAMC,gBAAgB,GAAG,MAAM;AAC7B,WAAO,GAAP;AACD,GAFD;;AAIA,QAAMC,YAAY,GAAG,MAAM;AACzB,QAAIC,aAAa,GAAG,CAApB;AACA,QAAIC,aAAa,GAAG,CAApB;;AACA,QAAI,CAACV,OAAO,CAACA,OAAO,CAACW,MAAR,GAAiB,CAAlB,CAAZ,EAAkC;AAChCD,MAAAA,aAAa,GAAGN,aAAhB;AACD,KAFD,MAEO;AACLM,MAAAA,aAAa,GAAGV,OAAO,CAACA,OAAO,CAACW,MAAR,GAAiB,CAAlB,CAAvB;AACD;;AACD,QAAIV,aAAa,KAAK,YAAtB,EAAoCQ,aAAa,GAAG,GAAhB;AACpC,QAAIR,aAAa,KAAK,eAAtB,EAAuCQ,aAAa,GAAG,KAAhB;AACvC,QAAIR,aAAa,KAAK,kBAAtB,EAA0CQ,aAAa,GAAG,IAAhB;AAC1C,QAAIR,aAAa,KAAK,eAAtB,EAAuCQ,aAAa,GAAG,KAAhB;AACvC,QAAIG,GAAG,GAAG,KAAK,MAAMF,aAAX,GAA2B,QAAQP,MAAM,GAAG,IAAjB,CAA3B,GAAoD,MAAMD,GAApE;AACA,QAAIW,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWH,GAAG,GAAGH,aAAjB,CAAZ;AACA,UAAMO,GAAG,GAAGX,YAAY,EAAxB;AACA,UAAMY,OAAO,GAAGV,gBAAgB,EAAhC;AACA,UAAMW,IAAI,GAAGZ,aAAa,EAA1B;AACAO,IAAAA,KAAK,GAAGA,KAAK,GAAGG,GAAR,GAAcC,OAAd,GAAwBC,IAAhC;AACA,WAAOL,KAAP;AACD,GAnBD;;AAqBA,QAAMM,IAAI,GAAG;AACXC,IAAAA,MAAM,EAAE,CAAC,eAAD,EAAkB,KAAlB,EAAyB,SAAzB,EAAoC,MAApC,CADG;AAEXC,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,KAAK,EAAE,kBADT;AAEEH,MAAAA,IAAI,EAAE,CACJX,YAAY,EADR,EAEJH,YAAY,EAFR,EAGJE,gBAAgB,EAHZ,EAIJD,aAAa,EAJT,CAFR;AAQEiB,MAAAA,eAAe,EAAE,CACf,mBADe,EAEf,mBAFe,EAGf,gBAHe,EAIf,mBAJe,CARnB;AAcEC,MAAAA,WAAW,EAAE;AAdf,KADQ;AAFC,GAAb;AAqBA,sBACE;AAAA,2BACE,QAAC,QAAD;AAAU,MAAA,IAAI,EAAEL;AAAhB;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAKD;;KA/DQtB,Q;AAiET,eAAeA,QAAf","sourcesContent":["import React from \"react\";\nimport { Doughnut } from \"react-chartjs-2\";\n\nfunction ChartPie(props) {\n  const { foodData, weights, activityLevel, age, height, initialWeight } =\n    props;\n\n  const calculateFat = () => {\n    return 1000;\n  };\n\n  const calculateCarb = () => {\n    return 500;\n  };\n\n  const calculateProtein = () => {\n    return 500;\n  };\n\n  const totalCalorie = () => {\n    let activityRatio = 0;\n    let weightForCalc = 0;\n    if (!weights[weights.length - 1]) {\n      weightForCalc = initialWeight;\n    } else {\n      weightForCalc = weights[weights.length - 1];\n    }\n    if (activityLevel === \"noActivity\") activityRatio = 1.2;\n    if (activityLevel === \"lightActivity\") activityRatio = 1.375;\n    if (activityLevel === \"moderateActivity\") activityRatio = 1.55;\n    if (activityLevel === \"heavyActivity\") activityRatio = 1.725;\n    let BMR = 66 + 6.3 * weightForCalc + 12.9 * (height / 2.54) - 6.8 * age;\n    let total = Math.floor(BMR * activityRatio);\n    const fat = calculateFat();\n    const protein = calculateProtein();\n    const carb = calculateCarb();\n    total = total - fat - protein - carb;\n    return total;\n  };\n\n  const data = {\n    labels: [\"Calories Left\", \"Fat\", \"Protein\", \"Carb\"],\n    datasets: [\n      {\n        label: \"My First Dataset\",\n        data: [\n          totalCalorie(),\n          calculateFat(),\n          calculateProtein(),\n          calculateCarb(),\n        ],\n        backgroundColor: [\n          \"rgb(255, 99, 132)\",\n          \"rgb(54, 162, 235)\",\n          \"rgb(50,205,50)\",\n          \"rgb(255, 205, 86)\",\n        ],\n        hoverOffset: 4,\n      },\n    ],\n  };\n  return (\n    <>\n      <Doughnut data={data} />\n    </>\n  );\n}\n\nexport default ChartPie;\n"]},"metadata":{},"sourceType":"module"}