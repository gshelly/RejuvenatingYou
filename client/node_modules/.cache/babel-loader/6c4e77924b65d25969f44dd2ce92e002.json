{"ast":null,"code":"var _jsxFileName = \"/Users/shellygupta/Desktop/Algorithms/Group/client/src/components/BarChart.js\";\nimport React from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst BarChart = () => {\n  const data = {\n    labels: ['1', '2', '3', '4', '5', '6'],\n    datasets: [{\n      label: 'My weight graph',\n      data: [65, 59, 80, 81, 56, 55, 40],\n      backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(255, 159, 64, 0.2)', 'rgba(255, 205, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(153, 102, 255, 0.2)', 'rgba(201, 203, 207, 0.2)'],\n      borderColor: ['rgb(255, 99, 132)', 'rgb(255, 159, 64)', 'rgb(255, 205, 86)', 'rgb(75, 192, 192)', 'rgb(54, 162, 235)', 'rgb(153, 102, 255)', 'rgb(201, 203, 207)'],\n      borderWidth: 1,\n      tension: -1,\n      yAxisID: \"y-axis-1\"\n    }]\n  };\n  const options = {\n    legend: {\n      display: false\n    },\n    responsive: false,\n    tooltips: {\n      mode: 'label'\n    },\n    elements: {\n      line: {\n        fill: false\n      }\n    },\n    scales: {\n      xAxes: [{\n        barThickness: 'flex',\n        display: true,\n        gridLines: {\n          display: false\n        },\n        labels: \"\",\n        ticks: {\n          autoSkip: false,\n          maxRotation: 45,\n          minRotation: 45\n        }\n      }],\n      yAxes: [{\n        type: 'linear',\n        display: true,\n        position: 'left',\n        id: 'y-axis-1',\n        gridLines: {\n          display: true\n        },\n        labels: {\n          show: false\n        },\n        ticks: {\n          beginAtZero: true\n        }\n      }]\n    }\n  };\n\n  const calculateWidth = () => {\n    const {\n      x\n    } = this.props;\n    let length = x ? x.length : 0;\n\n    switch (true) {\n      case length >= 0 && length <= 3:\n        return 400;\n\n      case length >= 4 && length <= 50:\n        return 1200;\n\n      case length >= 51 && length <= 100:\n        return 2000;\n\n      default:\n        return 5000;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Bar, {\n      data: data,\n      options: options,\n      width: this.calculateWidth(),\n      style: {\n        margin: \"50px 0px 20px 120px\",\n        width: \"50%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_c = BarChart;\nexport default BarChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"BarChart\");","map":{"version":3,"sources":["/Users/shellygupta/Desktop/Algorithms/Group/client/src/components/BarChart.js"],"names":["React","Bar","BarChart","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","tension","yAxisID","options","legend","display","responsive","tooltips","mode","elements","line","fill","scales","xAxes","barThickness","gridLines","ticks","autoSkip","maxRotation","minRotation","yAxes","type","position","id","show","beginAtZero","calculateWidth","x","props","length","margin","width"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Bar } from 'react-chartjs-2'\n\nconst BarChart = () => {\n    const data = {\n        labels: [\n            '1',\n            '2',\n            '3',\n            '4',\n            '5',\n            '6',\n        ],\n        datasets: [{\n            label: 'My weight graph',\n            data: [65, 59, 80, 81, 56, 55, 40],\n            backgroundColor: [\n                'rgba(255, 99, 132, 0.2)',\n                'rgba(255, 159, 64, 0.2)',\n                'rgba(255, 205, 86, 0.2)',\n                'rgba(75, 192, 192, 0.2)',\n                'rgba(54, 162, 235, 0.2)',\n                'rgba(153, 102, 255, 0.2)',\n                'rgba(201, 203, 207, 0.2)'\n            ],\n            borderColor: [\n                'rgb(255, 99, 132)',\n                'rgb(255, 159, 64)',\n                'rgb(255, 205, 86)',\n                'rgb(75, 192, 192)',\n                'rgb(54, 162, 235)',\n                'rgb(153, 102, 255)',\n                'rgb(201, 203, 207)'\n            ],\n            borderWidth: 1,\n            tension: -1,\n            yAxisID: \"y-axis-1\",\n        }],\n    }\n\n    const options = {\n        legend: {\n            display: false\n        },\n        responsive: false,\n        tooltips: {\n            mode: 'label'\n        },\n        elements: {\n            line: {\n                fill: false\n            }\n        },\n        scales: {\n            xAxes: [\n                {\n                    barThickness: 'flex',\n                    display: true,\n                    gridLines: {\n                        display: false\n                    },\n                    labels: \"\",\n                    ticks: {\n                        autoSkip: false,\n                        maxRotation: 45,\n                        minRotation: 45\n                    }\n                }\n            ],\n            yAxes: [\n                {\n                    type: 'linear',\n                    display: true,\n                    position: 'left',\n                    id: 'y-axis-1',\n                    gridLines: {\n                        display: true\n                    },\n                    labels: {\n                        show: false\n                    },\n                    ticks: {\n                        beginAtZero: true\n                    }\n                }\n            ]\n        }\n    }\n    const calculateWidth=() => {\n        const { x } = this.props\n        let length = x ? x.length : 0\n        switch (true) {\n            case length >= 0 && length <= 3:\n                return 400\n            case length >= 4 && length <= 50:\n                return 1200\n            case length >= 51 && length <= 100:\n                return 2000\n            default:\n                return 5000\n        }\n    }\n    return(\n        <>\n            <Bar  data={data}options={options}  width={this.calculateWidth()} style={{margin:\"50px 0px 20px 120px\",width:\"50%\"}}/>\n        </>\n    )\n}\n\nexport default BarChart"]},"metadata":{},"sourceType":"module"}